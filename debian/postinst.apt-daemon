#!/bin/sh

#Debconf hook. We don't rely on debconf being present at this time.
if [ -e /usr/share/debconf/confmodule ];then
    . /usr/share/debconf/confmodule
    DEBCONFEXISTS="true"
    export DEBCONFEXISTS
else
    DEBCONFEXISTS="false"
    export DEBCONFEXISTS
fi

#close stdout
#exec 1<&-
##close stderr
#exec 2<&-
##open stdout as $log_file file for read and write.
#exec 1<> "/tmp/minos-core-settings.${$}.debug"
##redirect stderr to stdout
#exec 2>&1
#set -x #enable trace mode

package="minos-core-settings"
users="$(busybox cat /etc/passwd | busybox awk -F: '{if ($3 >= 1000 && $3 < 60000) print $1}')"
diverge_dir="/usr/share/minos/diverge"

_diverge_element() {
    _diverge__orig="${1}"
    _diverge__new="${2}"
    _diverge__backup="$(printf "%s\\n" "${_diverge__orig}" | busybox sed 's:/:##:g')"

    if ! LC_ALL=C dpkg-divert --list "${package}" | \
        grep -xFq "diversion of ${_diverge__orig} to ${diverge_dir}/${_diverge__backup} by ${package}"; then
        mkdir -p "${diverge_dir}"
        dpkg-divert --package "${package}" --add --rename \
            --divert "${diverge_dir}/${_diverge__backup}" "${_diverge__orig}"
        ln -s "${_diverge__new}" "${_diverge__orig}"
    fi
}

_undiverge_element() {
    _diverge__orig="${1}"
    _diverge__new="${2}"
    _diverge__backup="$(printf "%s\\n" "${_diverge__orig}" | busybox sed 's:/:##:g')"

    if LC_ALL=C dpkg-divert --list "${package}" | \
        grep -xFq "diversion of ${_diverge__orig} to ${diverge_dir}/${_diverge__backup} by ${package}"; then
        rm -rf "${_diverge__orig}"
        dpkg-divert --package "${package}" --rename --remove "${_diverge__orig}"
        rmdir "${diverge_dir}" 2>/dev/null || :
    fi
}

_install_minos_setting() {
    for setting_file in "${@}"; do
        setting_file_target="$(busybox basename "${setting_file}")"
        setting_file_target="$(printf "%s\\n" "/${setting_file_target}" | busybox sed 's:##:/:g')"
        if [ ! -f "${setting_file_target}" ]; then
            if [ ! -d "$(busybox dirname "${setting_file_target}")" ]; then
                busybox mkdir -p "$(busybox dirname "${setting_file_target}")" >/dev/null 2>&1
            fi
            busybox cp "${setting_file}" "${setting_file_target}"
        fi
    done
}

_get_last_file_version() {
    #get last version of a bunch of .minos-backup.* files
    [ -z "${1}" ] && return 1

    _getlastversion__files="${1}".minos-backup.*
    _getlastversion__counter="0"

    for _getlastversion__file in ${_getlastversion__files}; do
        _getlastversion__counter="$((${_getlastversion__counter} + 1))"
    done

    if [ "${_getlastversion__counter}" -eq "1" ]; then
        if [ -e "${_getlastversion__file}" ]; then
            printf "%s" "${_getlastversion__file}"
        elif [ -e "${1}" ]; then
            printf "%s" "${1}"
        fi
    else
        _getlastversion__newer="${_getlastversion__file}"
        for _getlastversion__file in ${_getlastversion__files}; do
            if [ "${_getlastversion__file}" -nt "${_getlastversion__newer}" ]; then
                _getlastversion__newer="${_getlastversion__file}"
            fi
        done
        if [ -e "${_getlastversion__newer}" ]; then
            printf "%s" "${_getlastversion__newer}"
        fi
    fi
}

_replace_file_on_system_users() {
    for user in ${users}; do
        su "${user}" -c "test -f ~/.minos/not_override" && continue

        if su "${user}" -c "test -f ${2}" || su "${user}" -c "test -d ${2}"; then
            dist_size="$(su "${user}" -c "busybox du -s ${1}"|busybox cut -f1)"
            user_size="$(su "${user}" -c "busybox du -s ${2}"|busybox cut -f1)"
            vdotfile="minos-backup.$(busybox date +"%d-%m-%Y-%H:%M")"
            if [ X"${dist_size}" = X"${user_size}" ]; then
                continue
            else
                printf "%s\\n" "${package}: old $user's ${2} archive found, replacing and creating backup to ${2}.${vdotfile}"
                su "${user}" -c "busybox mv ${2} ${2}.${vdotfile}"
                su "${user}" -c "busybox cp -rL ${1} ${2}"
            fi
        else
            su "${user}" -c "busybox cp -rL ${1} ${2}"
        fi
    done
}

_recover_file_on_system_users() {
    for user in ${users}; do
        h="$(su "${user}" -c "echo ~" 2>/dev/null)" || continue
        su "${user}" -c "test -f ~/.minos/not_override" && continue
        archive="$(printf "%s\\n" "${1}" | sed "s:\$HOME:${h}:g;s:~/:${h}/:;s:\"::g;s:\'::g;")"

        last_file="$(_get_last_file_version "${archive}")"

        if su "${user}" -c "test -f ${last_file}" || su "${user}" -c "test -d ${last_file}"; then
            user_size="$(su "${user}" -c "busybox du -s ${1}"|busybox cut -f1)"
            last_size="$(su "${user}" -c "busybox du -s ${last_file}"|busybox cut -f1)"
            if [ X"${last_size}" = X"${user_size}" ]; then
                continue
            else
                printf "%s\\n" "${package}: old $user's archive found, recovering last version to ${1}"
                su "${user}" -c "busybox mv ${last_file} ${1}"
            fi
        fi
    done
}

_ensure_setting_is_set() {
    #ensure setting($1) is enabled in configuration file($2)
    # /etc/sysctl.conf
    # /etc/fstab
    [ -z "${1}" ]   && return 1
    [ -z "${2}" ]   && return 1
    [ ! -f "${2}" ] && return 1

    _ensuresetting__regex="$(printf   "%s\\n" "${1}" | busybox sed 's: :[ \\t]\\+:g')"
    _ensuresetting__setting="$(printf "%s\\n" "${1}" | busybox cut -d' ' -f1)"

    if busybox grep "$(printf "^%s" "${_ensuresetting__setting}")" "${2}" >/dev/null; then
        if ! busybox grep "$(printf "^%s" "${_ensuresetting__regex}")" "${2}" >/dev/null; then
            busybox sed -i -e "/^${_ensuresetting__setting}/ s:.*:${1}:" "${2}"
        fi
    else
        if busybox grep "$(printf "^#%s[ \t]" "${_ensuresetting__setting}")" "${2}" >/dev/null; then
            busybox sed -i -e "/^#${_ensuresetting__setting}/ s:#.*:${1}:" "${2}"
        else
            busybox sed -i -e "\$ a${1}" "${2}"
        fi
    fi
}

_daemonize() {
    #http://blog.n01se.net/blog-n01se-net-p-145.html
    [ -z "${1}" ] && return 1
    (   #1. fork, to guarantee the child is not a process
        #group leader, necessary for setsid) and have the
        #parent exit (to allow control to return to the shell)

        #2. redirect stdin/stdout/stderr before running child
        [ -t 0 ] && exec  </dev/null
        [ -t 1 ] && exec  >/dev/null
        [ -t 2 ] && exec 2>/dev/null
        if ! command -v "setsid" >/dev/null 2>&1; then
            #2.1 guard against HUP and INT (in child)
            trap '' 1 2
        fi

        #3. ensure cwd isn't a mounted fs so it does't block
        #umount invocations
        cd /

        #4. umask (leave this to caller)
        #umask 0

        #5. close unneeded fds
        #XCU 2.7 Redirection says: open files are represented by
        #decimal numbers starting with zero. The largest possible
        #value is implementation-defined; however, all
        #implementations shall support at least 0 to 9, inclusive,
        #for use by the application.
        i=3; while [ "${i}" -le "9" ]; do
            eval "exec ${i}>&-"
            i="$(($i + 1))"
        done

        #6. create new session, so the child has no
        #controlling terminal, this prevents the child from
        #accesing a terminal (using /dev/tty) and getting
        #signals from the controlling terminal (e.g. HUP, INT)
        if command -v "setsid" >/dev/null 2>&1; then
            exec setsid "$@"
        elif command -v "nohup" >/dev/null 2>&1; then
            exec nohup "$@" >/dev/null 2>&1
        else
            if [ ! -f "${1}" ]; then
                "$@"
            else
                exec "$@"
            fi
        fi
    ) &
    #2.2 guard against HUP (in parent)
    if ! command -v "setsid" >/dev/null 2>&1 \ &&
       ! command -v "nohup"  >/dev/null 2>&1; then
        disown -h "${!}"
    fi
}

_apt_add_queue() {
    for pkg in "${@}"; do
        if  busybox grep "${pkg}" /var/lib/apt/apt-rm-queue >/dev/null 2>&1; then
            busybox sed -i "/^${pkg}$/d" /var/lib/apt/apt-rm-queue
        else
            if ! busybox grep "^Package: ${pkg}$" /var/lib/dpkg/status >/dev/null 2>&1; then
                printf "%s\\n" "${pkg}" >> /var/lib/apt/apt-add-queue
            fi
        fi
    done; unset pkg
}

_apt_rm_queue() {
    for pkg in "${@}"; do
        if  busybox grep "${pkg}" /var/lib/apt/apt-add-queue >/dev/null 2>&1; then
            busybox sed -i "/^${pkg}$/d" /var/lib/apt/apt-add-queue
        else
            if busybox grep "^Package: ${pkg}$" /var/lib/dpkg/status >/dev/null 2>&1; then
                printf "%s\\n" "${pkg}" >> /var/lib/apt/apt-rm-queue
            fi
        fi
    done; unset pkg
}

_apt_install() {
    [ -z "${1}" ] && return
    _apt_add_queue $(printf "%s\\n" "${@}" | busybox sed "s:${package}::g")
}

_apt_purge() {
    [ -z "${1}" ] && return
    _apt_rm_queue $(printf "%s\\n" "${@}" | busybox sed "s:${package}::g")
}

_apt_daemon() {
    [ ! -f /var/lib/apt/apt-add-queue ] && [ ! -f /var/lib/apt/apt-rm-queue ] && return

    _apt_daemon__script="/var/lib/apt/apt-daemon"
    _apt_daemon_generator() {
        printf "%s\\n" "#!/bin/sh"
        printf "%s\\n" "#autogenerated by ${package}: $(date +%d-%m-%Y:%H:%M)"
        printf "\\n"
        printf "%s\\n" "if [ -f /var/lib/apt/apt-add-queue ]; then"
        printf "%s\\n" "  cp /usr/share/debconf/confmodule /usr/share/debconf/confmodule.bk"
        printf "%s\\n" "  cp /usr/share/minos/debconf/confmodule /usr/share/debconf/confmodule"
        printf "%s\\n" "  while :; do"
        printf "%s\\n" "   DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\"
        printf "%s\\n" "      -o Dpkg::Options::=\"--force-confdef\" \\"
        printf "%s\\n" "      -o Dpkg::Options::=\"--force-confold\" \\"
        printf "%s\\n" "      --force-yes \$(cat /var/lib/apt/apt-add-queue) && break"
        printf "%s\\n" "    sleep 0.1 || sleep 1"
        printf "%s\\n" "  done"
        printf "%s\\n" "  mv /usr/share/debconf/confmodule.bk /usr/share/debconf/confmodule"
        printf "%s\\n" "fi"
        printf "\\n"
        printf "%s\\n" "if [ -f /var/lib/apt/apt-rm-queue ]; then"
        printf "%s\\n" "  cp /usr/share/debconf/confmodule /usr/share/debconf/confmodule.bk"
        printf "%s\\n" "  cp /usr/share/minos/debconf/confmodule /usr/share/debconf/confmodule"
        printf "%s\\n" "  while :; do"
        printf "%s\\n" "    DEBIAN_FRONTEND=noninteractive apt-get purge -y \$(cat /var/lib/apt/apt-rm-queue) && break"
        printf "%s\\n" "    sleep 0.1 || sleep 1"
        printf "%s\\n" "  done"
        printf "%s\\n" "  mv /usr/share/debconf/confmodule.bk /usr/share/debconf/confmodule"
        printf "%s\\n" "fi"
        printf "\\n"
        printf "%s\\n" "mv /var/lib/apt/apt-add-queue /var/lib/apt/apt-add-queue.bk"
        printf "%s\\n" "mv /var/lib/apt/apt-rm-queue  /var/lib/apt/apt-rm-queue.bk"
        printf "\\n"
        printf "%s\\n" "rm -rf /var/lib/apt/apt-add-queue"
        printf "%s\\n" "rm -rf /var/lib/apt/apt-rm-queue"
        printf "%s\\n" "rm -rf \"${_apt_daemon__script}\""
    }
    _apt_daemon_generator > "${_apt_daemon__script}" && chmod +x "${_apt_daemon__script}"
    _daemonize /bin/sh   -c "${_apt_daemon__script}"
    printf "%s\\n" "${package}: package changes will be applied shortly upon completion of this apt/dpkg instance"
    printf "%s\\n" "${package}: DO NOT POWEROFF the system until it completes"
}

_enable_setting() {
    case "${1}" in
        kernel)
            _ensure_setting_is_set "vm.swappiness = 10"      /etc/sysctl.conf
            _ensure_setting_is_set "kernel.printk = 4 4 1 7" /etc/sysctl.conf
            ;;

        apt)
            apt-config dump | grep '^APT::Install-Recommends "false";$' >/dev/null 2>&1 || \
                _install_minos_setting '/usr/share/minos/core-settings/etc##apt##apt.conf.d##05disable-recommends'

            apt-config dump | grep '^APT::Install-Suggests "false";$'   >/dev/null 2>&1 || \
                _install_minos_setting '/usr/share/minos/core-settings/etc##apt##apt.conf.d##05disable-suggests'
            ;;

        sudo)
            busybox sed -i "/^#includedir.*\/etc\/sudoers\.d$/d" /etc/sudoers
            busybox sed -i -e "\$ a#includedir /etc/sudoers.d"   /etc/sudoers
            _install_minos_setting '/usr/share/minos/core-settings/etc##sudoers.d##minos-core'
            ;;

        ssh) _diverge_element /etc/ssh/ssh_config '/usr/share/minos/core-settings/etc##ssh##ssh_config' ;;
        git) _diverge_element /etc/gitconfig '/usr/share/minos/core-settings/etc##gitconfig' ;;

        motd)
            _diverge_element /etc/issue     '/usr/share/minos/core-settings/etc##issue'
            _diverge_element /etc/issue.net '/usr/share/minos/core-settings/etc##issue.net'
            _diverge_element /etc/legal     '/usr/share/minos/core-settings/etc##legal'
            _diverge_element /etc/update-motd.d/00-header    '/usr/share/minos/core-settings/etc##update-motd.d##00-header'
            _diverge_element /etc/update-motd.d/10-help-text '/usr/share/minos/core-settings/etc##update-motd.d##10-help-text'
            if [ ! -f /etc/update-motd.d/10-minos-sysinfo ]; then
                ln -s '/usr/share/minos/core-settings/etc##update-motd.d##10-minos-sysinfo' /etc/update-motd.d/10-minos-sysinfo
            fi
            ;;

        tmpfs) _ensure_setting_is_set "tmpfs /tmp tmpfs defaults,noatime,noexec,nosuid,nodev,size=10% 0 0" /etc/fstab ;;

        locales)
            locale-gen en_US en_US.UTF-8 && locale-gen
            #https://bugs.launchpad.net/ubuntu/+source/pam/+bug/155794
            if [ ! -f /etc/default/locale ]; then
                printf "%s\\n%s\\n" 'LANG="en_US.UTF-8"' 'LANGUAGE="en_US:en"' > /etc/default/locale
            fi
            ;;

        minos-bash)
            _install_minos_setting '/usr/share/minos/core-settings/etc##profile.d##minos-bash.sh'
            ;;

        bash_profile)
            _install_minos_setting '/usr/share/minos/core-settings/etc##skel##.bash_profile'
            _replace_file_on_system_users '/etc/skel/.bash_profile' '~/.bash_profile'
            ;;

        app-core)
            for user in ${users}; do
                su "${user}" -c "busybox id | busybox grep '(sudo)\|(admin)\|(wheel)'" >/dev/null 2>&1 || continue
                h="$(su "${user}" -c "echo ~" 2>/dev/null)" || continue

                userpkgs="$(busybox awk -v pattern="^app-core"       \
                    '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
                    "${h}"/.minos/config 2>/dev/null)"

                [ -z "${userpkgs}" ] && continue

                printf "%s\\n" "${package}: adding to the apt queue, ${user}'s defined pkgs: ${userpkgs} ..."
                _apt_install ${userpkgs}
            done

            globalpkgs="$(busybox awk -v pattern="^app-core"         \
                    '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
                     /etc/minos/config 2>/dev/null)"

            if [ -n "${globalpkgs}" ]; then
                printf "%s\\n" "${package}: adding to the apt queue, system defined pkgs: ${globalpkgs} ..."
                _apt_install ${globalpkgs}
            fi
            ;;

        app-purge)
            for user in ${users}; do
                su "${user}" -c "busybox id | busybox grep '(sudo)\|(admin)\|(wheel)'" >/dev/null 2>&1 || continue
                h="$(su "${user}" -c "echo ~" 2>/dev/null)" || continue

                rm_userpkgs="$(busybox awk -v pattern="^app-purge"   \
                    '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
                    "${h}"/.minos/config 2>/dev/null)"

                [ -z "${rm_userpkgs}" ] && continue

                printf "%s\\n" "${package}: removing from the apt queue, ${user}'s defined pkgs: ${rm_userpkgs} ..."
                _apt_purge ${rm_userpkgs}
            done

            rm_globalpkgs="$(busybox awk -v pattern="^app-purge"     \
                    '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
                     /etc/minos/config 2>/dev/null)"

            if [ -n "${rm_globalpkgs}" ]; then
                printf "%s\\n" "${package}: removing from the apt queue, system defined pkgs: ${rm_globalpkgs} ..."
                _apt_purge ${rm_globalpkgs}
            fi
            ;;

         dotfiles)
            for user in ${users}; do
                su "${user}" -c "test -f ~/.minos/not_override" && continue
                h="$(su "${user}" -c "echo ~" 2>/dev/null)"     || continue

                dotrepo="$(busybox awk -v pattern="^dotfiles"        \
                    '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
                    "${h}"/.minos/config 2>/dev/null)"

                if [ -z "${dotrepo}" ]; then
                    dotrepo="$(busybox awk -v pattern="^dotfiles"    \
                    '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
                    /etc/minos/config 2>/dev/null)"
                fi

                [ -z "${dotrepo}" ] && continue

                bdotrepo="$(busybox basename "${dotrepo}")"
                busybox mkdir -p /tmp/minos-core-setting
                git clone --depth=1 "${dotrepo}" /tmp/minos-core-setting/"${bdotrepo}" >/dev/null

                for dotfile in /tmp/minos-core-setting/"${bdotrepo}"/.*; do
                    [ ! -e "${dotfile}" ] && continue
                    bdotfile="$(busybox basename "${dotfile}")"

                    if [ X"${bdotfile}" = X"." ] || [ X"${bdotfile}" = X".." ]; then
                        continue
                    fi

                    if [ -e "${h}"/"${bdotfile}" ]; then
                        busybox diff -qr "${dotfile}" "${h}"/"${bdotfile}" >/dev/null 2>&1 && continue
                    fi

                    ownerdotfile="$(stat -c %U "${h}")" || ownerdotfile="${user}"
                    groupdotfile="$(stat -c %G "${h}")" || groupdotfile="${user}"
                    vdotfile="minos-backup.$(busybox date +"%d-%m-%Y-%H:%M")"

                    if [ -e "${h}"/"${bdotfile}" ]; then
                        printf "%s\\n" "${package}: old $user's ~/.${bdotfile} archive found, replacing and creating backup in ~/.${bdotfile}.${vdotfile}"
                        su "${user}" -c "busybox mv \"${h}\"/\"${bdotfile}\" \"${h}\"/\"${bdotfile}\".\"${vdotfile}\"" >/dev/null 2>&1
                    fi

                    busybox cp    -r "${dotfile}" "${h}"/"${bdotfile}"
                    busybox chown -R "${ownerdotfile}":"${groupdotfile}" "${h}"/"${bdotfile}"

                    #special case, don't remove ssh keys
                    old_ssh_conf="$(_get_last_file_version "${h}"/.ssh)"
                    if [ -n "${old_ssh_conf}" ] && [ ! X"${old_ssh_conf}" = X"${h}"/.ssh ]; then
                        busybox cp -- "${old_ssh_conf}"/* "${h}"/.ssh/
                    fi
                done; busybox rm -rf /tmp/minos-core-setting/
            done
            ;;

       aliases)
            _install_minos_setting '/usr/share/minos/core-settings/etc##skel##.aliases'
            _replace_file_on_system_users '/etc/skel/.aliases' '~/.aliases'
            ;;

        vim)
            _install_minos_setting '/usr/share/minos/core-settings/etc##skel##.vimrc'
            _replace_file_on_system_users '/etc/skel/.vimrc' '~/.vimrc'

            if [ -d /usr/share/minos/cache/vim/bundle/vundle/.git/ ]; then
                (cd /usr/share/minos/cache/vim/bundle/vundle && git pull)  >/dev/null 2>&1
            else
                busybox rm -rf /usr/share/minos/cache/vim
                #git clone --depth=1 "https://github.com/chilicuil/vundle" \
                git clone --depth=1 https://git::@github.com/chilicuil/vundle.git \
                    /usr/share/minos/cache/vim/bundle/vundle/ >/dev/null
            fi

            if [ -d /usr/share/minos/cache/vim/bundle/vundle/.git/ ]; then
                busybox rm -rf   /etc/skel/.vim
                busybox mkdir -p /etc/skel/.vim/bundle
                busybox cp -rL   /usr/share/minos/cache/vim/bundle/vundle/ /etc/skel/.vim/bundle/

                for user in ${users}; do
                    su "${user}" -c "test -f ~/.minos/not_override" && continue
                    su "${user}" -c "busybox mkdir -p ~/.vim/bundle/"
                    su "${user}" -c "test -d ~/.vim/bundle/vundle/" || \
                        su "${user}" -c "busybox cp -rL /etc/skel/.vim/bundle/vundle ~/.vim/bundle/vundle"
                    su "${user}" -c "vim -es -u ~/.vimrc -c \"BundleInstall\" -c qa" >/dev/null 2>&1
                    #su "${user}" -c "vim +BundleInstall +qall" >/dev/null 2>&1
                done
            fi
            ;;

        tmux)
            _install_minos_setting '/usr/share/minos/core-settings/etc##skel##.tmux.conf'
            _replace_file_on_system_users '/etc/skel/.tmux.conf' '~/.tmux.conf'

            if [ -d /usr/share/minos/cache/tmux/plugins/tundle/.git/ ]; then
                (cd /usr/share/minos/cache/tmux/plugins/tundle && git pull) >/dev/null 2>&1
            else
                busybox rm -rf /usr/share/minos/cache/tmux
                git clone --depth=1 "https://github.com/chilicuil/tundle" \
                    "/usr/share/minos/cache/tmux/plugins/tundle" >/dev/null
            fi

            if [ -d /usr/share/minos/cache/tmux/plugins/tundle/.git/ ]; then
                busybox rm -rf   /etc/skel/.tmux
                busybox mkdir -p /etc/skel/.tmux/plugins
                busybox cp -rL   /usr/share/minos/cache/tmux/plugins/tundle /etc/skel/.tmux/plugins/
                for user in ${users}; do
                    su "${user}" -c "test -f ~/.minos/not_override" && continue
                    su "${user}" -c "busybox mkdir -p ~/.tmux/plugins/" > /dev/null 2>&1
                    su "${user}" -c "test -d ~/.tmux/plugins/tundle/" || \
                        su "${user}" -c "busybox cp -rL /etc/skel/.tmux/plugins/tundle ~/.tmux/plugins/tundle"
                    su "${user}" -c "sh ~/.tmux/plugins/tundle/scripts/install_plugins.sh" >/dev/null 2>&1
                done
            fi
            ;;

        shundle)
            _install_minos_setting '/usr/share/minos/core-settings/etc##skel##.profile.d##shundle.sh'

            for user in ${users}; do
                su "${user}" -c "test -f ~/.minos/not_override" && continue
                su "${user}" -c "busybox mkdir ~/.profile.d" >/dev/null 2>&1
            done
            _replace_file_on_system_users '/etc/skel/.profile.d/shundle.sh' '~/.profile.d/shundle.sh'

            if [ -d /usr/share/minos/cache/shundle/bundle/shundle/.git/ ]; then
                (cd /usr/share/minos/cache/shundle/bundle/shundle && git pull) > /dev/null 2>&1
            else
                busybox rm -rf /usr/share/minos/cache/shundle
                git clone --depth=1 "https://github.com/chilicuil/shundle" \
                    "/usr/share/minos/cache/shundle/bundle/shundle" >/dev/null
            fi

            if [ -d /usr/share/minos/cache/shundle/bundle/shundle/.git/ ]; then
                busybox rm -rf /etc/skel/.shundle
                busybox cp -rL /usr/share/minos/cache/shundle/ /etc/skel/.shundle
                _replace_file_on_system_users '/etc/skel/.shundle' '~/.shundle'

                for user in ${users}; do
                    su "${user}" -c "test -f ~/.minos/not_override" && continue
                    su "${user}" -c "SHUNDLE_HOME=~/.shundle SHUNDLE_RC=~/.bashrc \
                        ~/.shundle/bundle/shundle/bin/shundle install" >/dev/null 2>&1
                    su "${user}" -c "SHUNDLE_HOME=~/.shundle SHUNDLE_RC=~/.profile.d/shundle.sh \
                        ~/.shundle/bundle/shundle/bin/shundle install" >/dev/null 2>&1
                done
            fi
            ;;

        hooks)
            globalhook="$(busybox awk -v pattern="^hook"             \
                    '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
                     /etc/minos/config 2>/dev/null)"

            if [ -n "${globalhook}" ]; then
                (su "${user}" -c "busybox wget ${globalhook} -O /bin/${package}-hook" || \
                    su "${user}" -c "wget ${globalhook} -O /bin/${package}-hook") >/dev/null 2>&1
                if [ -f /bin/${package}-hook ]; then
                    busybox chmod +x /bin/${package}-hook
                    printf "%s\\n" "${package}: executing system defined hook: ${globalhook}"
                    /bin/"${package}"-hook core
                    busybox rm -rf /bin/"${package}"-hook
                fi
            fi

            for user in ${users}; do
                su "${user}" -c "test -f ~/.minos/not_override" && continue
                h="$(su "${user}" -c "echo ~" 2>/dev/null)"     || continue

                userhook="$(busybox awk -v pattern="^hook"           \
                    '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
                    "${h}"/.minos/config 2>/dev/null)"

                [ -z "${userhook}" ] && continue

                (su "${user}" -c "busybox wget ${userhook} -O ~/.${package}-hook" || \
                    su "${user}" -c "wget ${userhook} -O ~/.${package}-hook") >/dev/null 2>&1

                su "${user}" -c "test -f  ~/.${package}-hook" || continue
                su "${user}" -c "busybox chmod +x ~/.${package}-hook"

                printf "%s\\n" "${package}: executing $user's defined hook: ${userhook}"
                su "${user}" -c "~/.${package}-hook core"
                su "${user}" -c "busybox rm -rf ~/.${package}-hook"
            done
            ;;
    esac
}

_disable_setting() {
    case "${1}" in
        kernel)
            busybox sed -i "/^vm.swappiness = 10/d"      /etc/sysctl.conf
            busybox sed -i "/^kernel.printk = 4 4 1 7/d" /etc/sysctl.conf
            ;;

        apt)
            rm -rf /etc/apt/apt.conf.d/05disable-recommends
            rm -rf /etc/apt/apt.conf.d/05disable-suggests
            ;;

        sudo) busybox rm -rf /etc/sudoers.d/minos-core ;;
        ssh) _undiverge_element /etc/ssh/ssh_config '/usr/share/minos/core-settings/etc##ssh##ssh_config' ;;
        git) _undiverge_element /etc/gitconfig '/usr/share/minos/core-settings/etc##gitconfig' ;;

        motd)
            _undiverge_element /etc/issue     '/usr/share/minos/core-settings/etc##issue'
            _undiverge_element /etc/issue.net '/usr/share/minos/core-settings/etc##issue.net'
            _undiverge_element /etc/legal     '/usr/share/minos/core-settings/etc##legal'
            _undiverge_element /etc/update-motd.d/00-header    '/usr/share/minos/core-settings/etc##update-motd.d##00-header'
            _undiverge_element /etc/update-motd.d/10-help-text '/usr/share/minos/core-settings/etc##update-motd.d##10-help-text'

            rm -rf /etc/update-motd.d/10-minos-sysinfo
            ;;

        tmpfs)
            busybox sed -i "/^tmpfs \/tmp tmpfs defaults,noatime,noexec,nosuid,nodev,size=10% 0 0/d" /etc/fstab
            ;;

        locales) : ;;
        minos-bash) busybox rm -rf /etc/profile.d/minos-bash.sh ;;

        bash_profile)
            busybox rm -rf /etc/skel/.bash_profile
            _recover_file_on_system_users '~/.bash_profile'
            ;;

        app-core|app-purge) : ;; #what would be the reverse process?

        dotfiles)
            for user in ${users}; do
                su "${user}" -c "test -f ~/.minos/not_override" && continue
                h="$(su "${user}" -c "echo ~" 2>/dev/null)"     || continue

                dotrepo="$(busybox awk -v pattern="^dotfiles"        \
                    '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
                    "${h}"/.minos/config 2>/dev/null)"

                if [ -z "${dotrepo}" ]; then
                    dotrepo="$(busybox awk -v pattern="^dotfiles"    \
                    '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
                    /etc/minos/config 2>/dev/null)"
                fi

                [ -z "${dotrepo}" ] && continue

                bdotrepo="$(busybox basename "${dotrepo}")"
                busybox mkdir -p /tmp/"${package}"
                git clone --depth=1  "${dotrepo}" /tmp/"${package}/${bdotrepo}" >/dev/null

                for dotfile in /tmp/"${package}/${bdotrepo}"/.*; do
                    [ ! -e "${dotfile}" ] && continue
                    bdotfile="$(busybox basename "${dotfile}")"

                    #special case, don't recover ssh keys
                    if [ X"${bdotfile}" = X"." ] || [ X"${bdotfile}" = X".." ] || [ X"${bdotfile}" = X".ssh" ]; then
                        continue
                    fi

                    if [ -e "${h}"/"${bdotfile}" ]; then
                        printf "%s\\n" "${package}: old $user's ~/.${bdotfile} archive found, recovering last state"
                        _recover_file_on_system_users "${bdotfile}"
                    fi

                done; busybox rm -rf /tmp/"${package}"/
            done
            ;;

       aliases)
            busybox rm -rf /etc/skel/.aliases
            _recover_file_on_system_users '~/.aliases'
            ;;

        vim)
            busybox rm -rf /etc/skel/.vim/bundle/vundle
            busybox rmdir  /etc/skel/.vim/bundle/
            busybox rmdir  /etc/skel/.vim/
            ;;

        tmux)
            busybox rm -rf /etc/skel/.tmux/plugins/tundle
            busybox rmdir  /etc/skel/.tmux/plugins/
            busybox rmdir  /etc/skel/.tmux/
            ;;

        shundle)
            busybox rm -rf /etc/skel/.shundle/bundle/shundle
            busybox rmdir  /etc/skel/.shundle/bundle/
            busybox rmdir  /etc/skel/.shundle/
            ;;

        hooks) : ;;
    esac
}

case "${1}" in
    configure)
        if [ "$DEBCONFEXISTS" = "true" ]; then
            #get user settings
            db_get "${package}"/settings
            settings="${RET}"

            #get default settings
            db_metaget "${package}"/settings Choices
            default_settings="${RET}"
        fi

        #enable selected items
        for setting in ${settings}; do
            setting="${setting%,*}" #remove ',' from tail
            _enable_setting "${setting}"

            default_settings="$(printf "%s\\n" "${default_settings}" | busybox sed 's:'"${setting}"'[, ]*::')"
        done

        #disable not selected items
        for not_selected_setting in ${default_settings}; do
            not_selected_setting="${not_selected_setting%,*}" #remove ',' from tail
            _disable_setting "${not_selected_setting}"
        done

        #leave apt daemon running behind to install/remove additional software
        _apt_daemon
        ;;
    abort-upgrade|abort-deconfigure|abort-remove)
        ;;
    *)
        printf "%s\\n" "${0} called with unknown argument \`${1}'" 1>&2
        exit 1
        ;;
esac

#DEBHELPER#
exit 0
